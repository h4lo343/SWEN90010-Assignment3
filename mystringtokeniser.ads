with Ada.Characters.Latin_1;

package MyStringTokeniser with SPARK_Mode is

   type TokenExtent is record
      Start : Positive;
      Length : Natural;
   end record;

   type TokenArray is array(Positive range <>) of TokenExtent;

   function Is_Whitespace(Ch : Character) return Boolean is
     (Ch = ' ' or Ch = Ada.Characters.Latin_1.LF or
        Ch = Ada.Characters.Latin_1.HT);

   procedure Tokenise(S : in String; Tokens : in out TokenArray; Count : out Natural) with
     Pre => (if S'Length > 0 then S'First <= S'Last) and Tokens'First <= Tokens'Last,

     -- In this judgement sentence, the variable 'Count' means the number of tokens generated by
     -- procedure 'Tokenise' from string 'S', and the 'Tokens'Length' means the length of array which
     -- is used to store token generated. It is necessary because it makes sure that
     -- after Tokenise procedure is finished, all the tokens generated could be stored into
     -- 'Tokens' array , there can't be more tokens generated more than the limit the 'Token'
     -- array can store, which means, a memory leakage.
     Post => Count <= Tokens'Length and

     -- This for loop helps to check all the tokens that are generated
     -- and stored in the 'Tokens' array to see whether each token from them
     -- meets the conditions defined inside of the for loop
     (for all Index in Tokens'First..Tokens'First+(Count-1) =>


        -- This judgement sentence means that: for each token generated by
        -- the procedure, the starting index of the token must be more or
        -- equal to the starting index of the target string 'S'. It is necessary
        -- because it makes sure that all the content of the tokens generated
        -- are within or, come from the string 'S'. It means, no memory outside
        -- of the string 'S' is accessed during the procedure
        (Tokens(Index).Start >= S'First and

           -- This judgement sentence means: for all tokens generated, they can not
           -- be empty strings. This is necessary because it makes sure that all the
           -- tokens are valid, non-empty strings.
           Tokens(Index).Length > 0) and then

            -- This judgement sentence means: the length of all tokens stored in 'Tokens'
            -- arrary should be equal or less than the length of the substring of 'S'
            -- (start from the starting index of the token, to the end of the string 'S')
            -- It is necessary becasue it makes sure all the tokens are substring from 'S'
            -- and it is impossible for tokens to get memory outside of the string 'S'
            Tokens(Index).Length-1 <= S'Last - Tokens(Index).Start);


end MyStringTokeniser;
